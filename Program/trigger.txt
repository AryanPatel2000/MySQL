
-> 	create table employee (name varchar(45) not null, occupation varchar(45) not null, working_date date, working_hours varchar(10));

	insert into employee(name,occupation,working_date,working_hours) values 
	('Robin', 'Scientist', '2020-10-04', 12), ('Warner', 'Engineer', '2020-10-04', 10),  
	('Bolt', 'Actor', '2020-10-04', 13), ('Faf', 'Doctor', '2020-10-04', 14),  
	('Archer', 'Teacher', '2020-10-04', 12),('Bravo', 'Business', '2020-10-04', 11);

==> MySQL Trigger

1> Create Trigger

->	Syntax: CREATE TRIGGER trigger_name
				(AFTER|BEORE) (INSERT|UPDATE|DELETE)
				ON table_name FOR EACH ROW
				BEGIN
					--variable declarations
					--trigger code
				END ;
				
-> 	This trigger is invoked automatically insert the working_hours = 0 if someone tries to insert working_hours < 0.

DELIMITER //
	CREATE TRIGGER before_insert_empworkinghours
		BEFORE INSERT 
			ON employee  FOR EACH ROW
		BEGIN
			IF NEW.working_hours < 0 THEN
				SET NEW.working_hours = 0;
			END IF;
		END //
DELIMITER ;
		
-> 	INSERT INTO employee(name,occupation,working_date,working_hours) values
	('Maxwell', 'Cricketer', '2020-10-04', 10);
->	insert into employee(name,occupation,working_date,working_hours) values('Max', 'Contractor', '2020-10-04', -10);


2>	 Drop Trigger

->	Syntax: DROP TRIGGER database_name.trigger_name;
	
	DROP TRIGGER trigger_demo.before_insert_empworkinghours;
	
3>	Before Insert Trigger

		Syntax: CREATE TRIGGER trigger_name
				BEFORE INSERT
				ON table_name FOR EACH ROW
				BEGIN
						variable_declarations..
						Trigger_body;
				END ;
	
->	This trigger is invoked automatically that inserts the occupation = 'Doctor' if someone tries to insert the occupation = 'Scientist'.

DELIMITER //
	Create Trigger before_insert 
		BEFORE INSERT 
		ON employee FOR EACH ROW
			BEGIN
				IF NEW.occupation = 'Scientist' THEN
					SET NEW.occupation = 'Doctor';
				END IF;
			END //
DELIMITER ;
	
-> INSERT INTO employee (name,occupation,working_date,working_hours) values
	('Markus', 'Scientist', '2020-10-08', 14);
	
->	INSERT INTO employee (name,occupation,working_date,working_hours) values
	('Alexa', 'Actor', '2020-10-08', 12);
	

4>	After Insert Trigger	

		Syntax: Create Trigger trigger_name
				After Insert 
				ON table_name FOR EACH ROW 
				BEGIN
					variable_declarations
					Trigger_body
				END;
				
-> create table employee_info(name varchar(45) NOT NULL, occupation varchar(45) not null, wroking_date date default null, working_hours varchar(10) default null,last_inserted time );
	
DELIMITER //
	Create Trigger after_insert
	After Insert 
	ON  employee  FOR EACH ROW
		BEGIN
			insert into employee_info values(new.name,new.occupation,new.working_date,new.working_hours, CURTIME() );
		END //
DELIMITER ;

-> 	INSERT INTO employee (name,occupation,working_date,working_hours) values ('Amit', 'Actor', '2020-10-09', 15);
->	select * from employee_info;


5>	Before Update Trigger

		Syntax: Create Trigger trigger_name 
				Before Update
				ON table_name FOR EACH ROW
				BEGIN
					variable_declarations
					Trigger_body
				END;
				
->	This trigger is invoked automatically before an update event occurs in the table.

DELIMITER //
		
		Create Trigger before_update
		BEFORE UPDATE
		ON employee FOR EACH ROW
		BEGIN
			
			DECLARE error_msg varchar(255);
			SET error_msg = ('The New Working Hours can not be less than or equal to 10');
			
				IF new.working_hours <= 10  THEN
					SIGNAL SQLSTATE '45000'
					SET MESSAGE_TEXT = error_msg;
				END IF;
	
		END //
	
DELIMITER ;
			
->	UPDATE employee SET working_hours = 12 WHERE name = 'Warner';
->	UPDATE employee SET working_hours = 10 WHERE name = 'Warner';



->	create table player (player_id int not null auto_increment,name varchar(255) not null, team varchar(255) not null,prise bigint,primary key(player_id));
->	insert into player(name,team,prise) values ('Rashid khan','Hydrabad',1000000),('Hardik Pandya','Mumbai',1500000),(' K.L.Rahul','Punjab',1500000),('Shami','Punjab',1200000),('Chahal','Banglore',1400000);

->	create table player_history (player_id int not null auto_increment,name varchar(255) not null, team varchar(255) not null,team_changed varchar(255),date_of_changed DATE,primary key(player_id));
	
6>	After Update Trigger

	Syntax:	Create Trigger trigger_name
			After Update
			ON employee FOR EACH ROW
			BEGIN
				variable_declarations
				Trigger_body
			END;
			
DELIMITER //
	
		Create Trigger after_update
		AFTER UPDATE
		ON player FOR EACH ROW
		BEGIN
			IF (OLD.team <> new.team) THEN
				INSERT INTO player_history (player_id,name,team,team_changed,date_of_changed) values (old.player_id, old.name, old.team, NEW.team,sysdate());
			END IF;
		END //
DELIMITER ;

->	UPDATE player SET team = 'Gujarat' WHERE player_id = 2 ;	
->	UPDATE player SET team = 'Rajsthan' WHERE name = 'Chahal' ;


->	create table player_archives (player_id int not null auto_increment,name varchar(255) not null, team varchar(255) not null,date_of_deleted TIMESTAMP DEFAULT NOW(),primary key(player_id));

7>	Before Delete Trigger
	
	Syntax: Create Trigger trigger_name
			Before Delete
			ON table_name FOR EACH ROW
			BEGIN
				variable_declarations
				Trigger_body
			END;

DELIMITER //			
	Create Trigger before_delete
	BEFORE DELETE
	ON player FOR EACH ROW
	BEGIN
		INSERT INTO player_archives(player_id ,name,team) values (OLD.player_id,OLD.name,OLD.team);
	END //
DELIMITER ;

->	DELETE FROM player WHERE player_id = 8 ;
->	DELETE FROM player WHERE player_id = 9 ;



->	create table total_budget (Total_budget DECIMAL(10,2) NOT NULL);
->	insert into total_budget (Total_budget) SELECT SUM(prise) FROM player;

8>	After Delete Trigger

	Syntax: Create Trigger trigger_name
			After Delete
			ON table_name FOR EACH ROW
			BEGIN
				variable_declarations
				Trigger_body
			END;
			
DELIMITER //
		Create Trigger after_delete
		After Delete
		ON player FOR EACH ROW
		BEGIN
			UPDATE total_budget SET Total_budget = Total_budget - OLD.prise;
		END //
		
DELIMITER ;

DELETE FROM player WHERE player_id = 1;
SELECT * FROM total_budget;


